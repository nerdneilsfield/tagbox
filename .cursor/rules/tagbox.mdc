---
description: 
globs: *.rs,*.toml
alwaysApply: false
---
# AGENTS.md ‚Äì TagBox Agent Guidelines

## üîç Project Overview

TagBox is a modular, offline-first file management system written in Rust. It supports full-text search, tag/category classification, semantic linking, and metadata extraction. The project includes:

* `tagbox-core/`: Core async library with database logic, import pipeline, metadata extraction, and search
* `tagbox-cli/`: Command-line interface tool, supports JSON and stdio input
* `tagbox-gui/`: FLTK-based desktop UI
* `tagbox-tui/`: Optional terminal interface (future)
* `tagbox-config/`: TOML configuration structure
* `tagbox-tools/`: Utilities for metadata extraction

Data is stored locally in SQLite (with FTS5 + Signal tokenizer support). No cloud dependencies. The agent should follow async-first, type-safe, modular principles.

## üìÇ Folder Responsibilities

| Folder         | Purpose                                |
| -------------- | -------------------------------------- |
| `tagbox-core/` | All business logic and data types      |
| `tagbox-cli/`  | Interface parsing, invokes core        |
| `schema.rs`    | DB schema creation via sea-query       |
| `search.rs`    | DSL ‚Üí SQL query building               |
| `editor.rs`    | Metadata update & soft-delete          |
| `errors.rs`    | TagboxError definition (use thiserror) |
| `tests/`       | Use tokio, tempfile, assert\_cmd       |


## üõ†Ô∏è Development Environment

* Rust 1.70+
* Cargo workspace, Rust edition 2021+
* C++/C compiler for FFI

## Build

```bash
cargo install sqlx-cli --no-default-features --features sqlite

# download all dependencies
cargo build --all
```

See [Build Instructions](BUILDING.md)

## üß™ Validation & Testing

### Local Validation

* Run all tests: `cargo test --all`
* Check formatting: `cargo fmt --check`
* Lint warnings: `cargo clippy -- -D warnings`
* Audit: `cargo audit`
* Bench (opt): `cargo bench`

### Coverage (recommended)

* `cargo tarpaulin` for code coverage
* `cargo nextest` for parallel execution

### CI

See `.github/workflows/ci.yml` ‚Äì all PRs must pass.

## ‚úÖ Contribution Style

* Follow Conventional Commits: `feat/`, `fix/`, `test/`
* Follow Module name `feat/core/`, `feat/gui/`, `feat/tui/` and so on
* Use snake\_case for functions, CamelCase for types
* Structure every public module with `mod.rs` and matching `tests` section
* Prioritize async functions in all core APIs

## üß† Prompting Codex / Claude / Cursor

### Context & Style

* Use the full `lib.rs` API definitions for reference
* Point directly to modules like `importer`, `search`, `editor`, etc.
* Treat `types.rs` as source of truth for FileEntry and ImportMetadata
* Refer to `config.rs` for validating or modifying `AppConfig`

### Suggested Workflows

* For Codex:

  * Ask to refactor sync ‚Üí async using `tokio`
  * Ask to generate unit tests using `tempfile`, `assert_cmd`
  * Ask to generate DSL parser with `pest` + tests
* For Claude:

  * Provide schema intent, ask for ER modeling
  * Ask to explain/refactor complex types or error handling logic
* For Cursor:

  * Tag `AGENTS.md` in `.cursor.json`
  * Enable project-wide context to link `tagbox-core` and CLI usage

## üß© Project Migration

* CLI and GUI are unified around `tagbox-core` ‚Äì no logic duplication
* FTS5 search DSL is under active improvement (refactor in progress)
* Migration to async-std is **not** planned; use tokio ecosystem only

## üß± PR Rules

* Title: `[core] fix: extract_hash into reusable util`
* PR must link to specific module or function if logic is modified
* If modifying config or schema, update `config.toml` and ERD diagram
* Include tests or clear reason why it's not needed

## üõ†Ô∏è Commands

* Build all: `cargo build --all`
* CLI test: `cargo run -p tagbox-cli -- search --tag Rust`
* Interactive TUI (WIP): `cargo run -p tagbox-tui`

## üîÆ Experimental

* Claude 4 agents may generate `ImportMetadata` mapping from LLM-parsed JSON
* GPT-4 can attempt auto-tag suggestions from content with fallback rules
* Plugin system planned for v0.3+ (via dynamic trait loading in core)

