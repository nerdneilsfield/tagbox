name: CI

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'
  pull_request:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SQLX_OFFLINE: true
  SCCACHE_GHA_ENABLED: true

# Cancel outdated builds
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  # Quick checks that should fail fast
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          # An explicit cache key that is used instead of the automatic `job`-based key
          prefix-key: "v1-rust"
          # Cache only cargo registry, not build artifacts for quick checks
          cache-targets: false

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run quick checks
        run: ./scripts/ci-quick-checks.sh

  # Main test job with matrix strategy
  test:
    name: Test Suite
    needs: quick-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          # Reduce matrix for PRs
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          # An explicit cache key prefix
          prefix-key: "v1-rust"
          # Additional key for cache differentiation
          key: ${{ matrix.rust }}
          # Cache on test failure to speed up debugging
          cache-on-failure: true

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Cache SQLite database
        uses: actions/cache@v4
        with:
          path: .sqlx-data
          key: ${{ runner.os }}-sqlx-${{ hashFiles('**/schema.rs', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-sqlx-

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config openssl

      - name: Install sqlx-cli
        uses: taiki-e/install-action@v2
        with:
          tool: sqlx-cli

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run full test suite
        run: ./scripts/ci-test.sh --skip-db-init
        env:
          # Override sccache for specific commands in script
          RUSTC_WRAPPER: sccache

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.rust }}
          path: |
            target/nextest/
            **/*.log

  # Code coverage job (only on Linux stable)
  coverage:
    name: Code Coverage
    needs: quick-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust"
          key: "coverage"
          cache-on-failure: true

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Install tarpaulin
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin

      - name: Install sqlx-cli
        uses: taiki-e/install-action@v2
        with:
          tool: sqlx-cli

      - name: Setup database
        run: |
          mkdir -p .sqlx-data
          rm -f .sqlx-data/tagbox.db
          touch .sqlx-data/tagbox.db
          DATABASE_URL="sqlite:.sqlx-data/tagbox.db" cargo run --bin tagbox-init-db
          cd tagbox-core && DATABASE_URL="sqlite:../.sqlx-data/tagbox.db" cargo sqlx prepare -- --lib

      - name: Generate coverage
        run: |
          DATABASE_URL="sqlite:.sqlx-data/tagbox.db" cargo tarpaulin --all --out Xml --out Html --output-dir coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     files: ./coverage/cobertura.xml
      #     flags: unittests
      #     name: codecov-umbrella
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     fail_ci_if_error: false

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust"
          key: "security"
          cache-targets: false

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Run security audit
        uses: rustsec/audit-check@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Documentation check
  docs:
    name: Documentation
    needs: quick-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust"
          key: "docs"
          cache-targets: false

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Check documentation
        run: cargo doc --all --no-deps --all-features
        env:
          RUSTDOCFLAGS: "-D warnings"

  # Final status check
  ci-success:
    name: CI Success
    if: always()
    needs: [quick-checks, test, coverage, security, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more jobs failed"
            exit 1
          else
            echo "All jobs passed successfully"
          fi

      - name: Generate summary
        if: github.event_name == 'pull_request'
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Checks | ${{ needs.quick-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.docs.result }} |" >> $GITHUB_STEP_SUMMARY