name: Nightly

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      full_matrix:
        description: 'Run full OS/toolchain matrix'
        required: false
        default: 'true'
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  SQLX_OFFLINE: true
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: sccache

jobs:
  # Extended test matrix
  extended-tests:
    name: Extended Tests (${{ matrix.os }} / ${{ matrix.rust }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, nightly]
        include:
          # Test minimum supported Rust version
          - os: ubuntu-latest
            rust: "1.70"
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.rust == 'nightly' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-build-

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config openssl

      - name: Install tools
        run: |
          cargo install cargo-binstall cargo-quickinstall
          cargo install sqlx-cli --no-default-features --features sqlite
          cargo binstall cargo-nextest
          cargo binstall cargo-audit

      - name: Setup database
        run: |
          mkdir -p .sqlx-data
          rm -f .sqlx-data/tagbox.db
          touch .sqlx-data/tagbox.db
          DATABASE_URL="sqlite:.sqlx-data/tagbox.db" cargo run --bin tagbox-init-db
          cd tagbox-core && DATABASE_URL="sqlite:../.sqlx-data/tagbox.db" cargo sqlx prepare -- --lib

      - name: Run full CI test suite
        run: |
          chmod +x scripts/ci-test.sh
          ./scripts/ci-test.sh --verbose

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-${{ matrix.os }}-${{ matrix.rust }}-results
          path: |
            .ci-reports/
            target/nextest/
            **/*.log

  # Benchmark tests
  # benchmarks:
  #   name: Performance Benchmarks
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Install Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: Setup sccache
  #       uses: mozilla-actions/sccache-action@v0.0.6

  #     - name: Cache cargo registry
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #         key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-registry-

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libssl-dev pkg-config
  #         cargo install sqlx-cli --no-default-features --features sqlite
  #         cargo install cargo-benchcmp

  #     - name: Setup database
  #       run: |
  #         mkdir -p .sqlx-data
  #         rm -f .sqlx-data/tagbox.db
  #         touch .sqlx-data/tagbox.db
  #         DATABASE_URL="sqlite:.sqlx-data/tagbox.db" cargo run --bin tagbox-init-db
  #         cd tagbox-core && DATABASE_URL="sqlite:../.sqlx-data/tagbox.db" cargo sqlx prepare -- --lib

  #     - name: Run benchmarks
  #       run: |
  #         DATABASE_URL="sqlite:.sqlx-data/tagbox.db" cargo bench --all | tee benchmark-results.txt

  #     - name: Upload benchmark results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: benchmark-results
  #         path: |
  #           benchmark-results.txt
  #           target/criterion/

  # Dependency check
  dependencies:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Check for outdated dependencies
        run: |
          cargo install cargo-outdated
          cargo outdated --root-deps-only --exit-code 1 || true

      - name: Check dependency tree
        run: |
          cargo tree --duplicates
          cargo tree --depth 3 > dependency-tree.txt

      - name: License scan
        run: |
          cargo install cargo-license
          cargo license --json > licenses.json

      - name: Upload dependency analysis
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            dependency-tree.txt
            licenses.json

  # Create nightly report
  report:
    name: Generate Nightly Report
    #needs: [extended-tests, benchmarks, dependencies]
    needs: [extended-tests, dependencies]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate report
        run: |
          mkdir -p nightly-report
          echo "# Nightly Build Report" > nightly-report/README.md
          echo "" >> nightly-report/README.md
          echo "Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> nightly-report/README.md
          echo "" >> nightly-report/README.md
          echo "## Test Results" >> nightly-report/README.md
          echo "" >> nightly-report/README.md
          echo "| OS | Toolchain | Status |" >> nightly-report/README.md
          echo "|----|-----------|--------|" >> nightly-report/README.md
          
          # Add more report generation logic here
          
          echo "" >> nightly-report/README.md
          echo "## Artifacts" >> nightly-report/README.md
          echo "" >> nightly-report/README.md
          echo "All test artifacts are available in the workflow run." >> nightly-report/README.md

      - name: Upload nightly report
        uses: actions/upload-artifact@v4
        with:
          name: nightly-report
          path: nightly-report/
          retention-days: 30

      - name: Create issue if failed
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const title = `Nightly build failed - ${date}`;
            const body = `The nightly build failed on ${date}. Please check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['nightly-failure', 'ci']
            });